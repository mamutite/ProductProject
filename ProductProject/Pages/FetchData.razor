@page "/fetchdata"

@using ProductProject.Data

@inject AuthenticationStateProvider AuthenticationStateProvider

@*@inherits OwningComponentBase<ProductService>*@

<h1>Products Grid</h1>

<AuthorizeView>
    <!-- Show this section if the user is logged in -->
    <Authorized>
        <h4>Hello, @context.User.Identity.Name!</h4>
        @if (products == null)
        {
            <!-- Show this if the current user has no data... yet... -->
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Product Id</th>
                        <th>Product Name</th>
                        <th>Units In Stock</th>
                        <th>Unit Price</th>
                        <th>Delivery On</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var product in products)
                    {
                        @if (product.UnitInStock > 0)
                        {
                            <tr>
                                <td>@product.ProductId</td>
                                <td>@product.ProductName</td>
                                <td>@product.UnitInStock</td>
                                <td>@product.UnitPrice</td>
                                <td>@product.DeliveryOn.ToShortDateString()</td>
                                <td>
                                    <button class="btn btn-primary"
                                            @onclick="(() => EditProduct(product))">
                                        Edit
                                    </button>

                                </td>

                            </tr>
                        }
                        else
                        {
                            <tr style="background-color: red">
                                <td>@product.ProductId</td>
                                <td>@product.ProductName</td>
                                <td>@product.UnitInStock</td>
                                <td>@product.UnitPrice</td>
                                <td>@product.DeliveryOn.ToShortDateString()</td>
                                <td>
                                    <button class="btn btn-primary"
                                            @onclick="(() => EditProduct(product))">
                                        Edit
                                    </button>

                                </td>

                            </tr>
                        }
                    }
                </tbody>
            </table>

            <p>
                <button class="btn btn-primary"
                        @onclick="AddNewProduct">
                    Add New Product
                </button>
            </p>

            @if (ShowPopup)
            {
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edit Forecast</h3>

                                <button type="button" class="close"
                                        @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>

                            </div>

                            <EditForm Model="product" OnValidSubmit="@SaveProduct" Context="formContext">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <p>
                                    <label>
                                        Product Name:<br>
                                        <InputText @bind-Value="product.ProductName" />
                                    </label>
                                </p>
                                <p>
                                    <label>
                                        Unit Price:<br>
                                        <InputNumber @bind-Value="product.UnitPrice" />
                                    </label>
                                </p>
                                <p>
                                    <label>
                                        Unit In Stock:<br>
                                        <InputNumber @bind-Value="product.UnitInStock" />
                                    </label>
                                </p>
                                <p>
                                    <label>
                                        Delivery On:<br>
                                        <InputDate @bind-Value="product.DeliveryOn" />
                                    </label>
                                </p>

                                <button class="btn btn-primary" type="submit">Submit</button>
                                @if (product.ProductId > 0)
                                {
                                    <button class="btn btn-primary"
                                            @onclick="DeleteProduct">
                                        Delete
                                    </button>
                                }
                            </EditForm>
                        </div>
                    </div>
                </div>
            }
        }
    </Authorized>

    <NotAuthorized>
        <p>You're not signed in.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    List<Product> products;

    protected override void OnInitialized()
    {
        products = new List<Product>()
        {
            new Product() { ProductId = 1, ProductName = "sad", UnitInStock = 3, UnitPrice = 12.55m, DeliveryOn = DateTime.Now }
        }; ;
    }

    Product product = new Product();
    bool ShowPopup = false;

    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    void AddNewProduct()
    {
        // Make new forecast
        product = new Product();

        // Set Id to 0 so we know it is a new record
        product.ProductId = 0;
        product.DeliveryOn = DateTime.Now;

        // Open the Popup
        ShowPopup = true;
    }

    void SaveProduct()
    {
        // Close the Popup
        ShowPopup = false;

        if (product.ProductId == 0)
        {
            Product newProduct = new Product();

            newProduct.ProductId = products.Last().ProductId + 1;
            newProduct.ProductName = product.ProductName;
            newProduct.UnitInStock = product.UnitInStock;
            newProduct.UnitPrice = product.UnitPrice;
            newProduct.DeliveryOn = product.DeliveryOn;

            // Save the result
            products.Add(newProduct);
        }
        else
        {
            var exProduct = products.Where(a => a.ProductId == product.ProductId).FirstOrDefault();

            if (exProduct != null)
            {
                exProduct.ProductName = product.ProductName;
                exProduct.UnitInStock = product.UnitInStock;
                exProduct.UnitPrice = product.UnitPrice;
                exProduct.DeliveryOn = product.DeliveryOn;
            }
        }
    }


    void EditProduct(Product selectedProduct)
    {
        product = selectedProduct;

        // Open the Popup
        ShowPopup = true;
    }

    void DeleteProduct()
    {
        ShowPopup = false;

        products.Remove(product);
    }
}
